"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const PostController_1 = require("../controllers/PostController");
const PostRepository_1 = require("../../infrastructure/repositories/PostRepository");
const UserRepository_1 = require("../../infrastructure/repositories/UserRepository");
const ReportRepository_1 = require("../../infrastructure/repositories/ReportRepository");
const CommentRepository_1 = require("../../infrastructure/repositories/CommentRepository");
const S3Service_1 = require("../../infrastructure/services/S3Service");
const authMiddleware_1 = require("../middleware/authMiddleware");
const checkUserBlockedMiddleware_1 = require("../middleware/checkUserBlockedMiddleware");
const multer_1 = __importDefault(require("multer"));
const NotificationRepository_1 = require("../../infrastructure/repositories/NotificationRepository");
const postRouter = (0, express_1.Router)();
const postRepository = new PostRepository_1.PostRepository();
const userRepository = new UserRepository_1.UserRepository();
const reportRepository = new ReportRepository_1.ReportRepository();
const commentRepository = new CommentRepository_1.CommentRepository();
const notificationRepository = new NotificationRepository_1.NotificationRepository;
const s3Service = new S3Service_1.S3Service();
const postController = new PostController_1.PostController(postRepository, s3Service, userRepository, commentRepository, reportRepository, notificationRepository);
const upload = (0, multer_1.default)({ storage: multer_1.default.memoryStorage() });
postRouter.post('/create', authMiddleware_1.authMiddleware, checkUserBlockedMiddleware_1.checkUserBlockedMiddleware, upload.single('file'), (req, res) => postController.createPost(req, res));
postRouter.get('/', authMiddleware_1.authMiddleware, checkUserBlockedMiddleware_1.checkUserBlockedMiddleware, (req, res) => postController.getPostsForHome(req, res));
postRouter.get('/profile/:userId', authMiddleware_1.authMiddleware, checkUserBlockedMiddleware_1.checkUserBlockedMiddleware, (req, res) => postController.getPostsForProfile(req, res));
postRouter.delete('/delete/:id', authMiddleware_1.authMiddleware, checkUserBlockedMiddleware_1.checkUserBlockedMiddleware, (req, res) => postController.deletePost(req, res));
postRouter.put('/update/:id', authMiddleware_1.authMiddleware, checkUserBlockedMiddleware_1.checkUserBlockedMiddleware, (req, res) => postController.updatePost(req, res));
postRouter.post('/like/:id', authMiddleware_1.authMiddleware, checkUserBlockedMiddleware_1.checkUserBlockedMiddleware, (req, res) => postController.likePost(req, res));
postRouter.post('/report/:id', authMiddleware_1.authMiddleware, checkUserBlockedMiddleware_1.checkUserBlockedMiddleware, (req, res) => postController.reportPost(req, res));
postRouter.get('/comments/:postId', authMiddleware_1.authMiddleware, checkUserBlockedMiddleware_1.checkUserBlockedMiddleware, (req, res) => postController.getComments(req, res));
postRouter.post('/comments/add/:postId', authMiddleware_1.authMiddleware, checkUserBlockedMiddleware_1.checkUserBlockedMiddleware, (req, res) => postController.createComment(req, res));
postRouter.put('/comments/edit/:postId/:commentId', authMiddleware_1.authMiddleware, checkUserBlockedMiddleware_1.checkUserBlockedMiddleware, (req, res) => postController.updateComment(req, res));
postRouter.delete('/comments/delete/:postId/:commentId', authMiddleware_1.authMiddleware, checkUserBlockedMiddleware_1.checkUserBlockedMiddleware, (req, res) => postController.deleteComment(req, res));
postRouter.post('/comments/reply/:postId/:parentCommentId', authMiddleware_1.authMiddleware, checkUserBlockedMiddleware_1.checkUserBlockedMiddleware, (req, res) => postController.createReplyComment(req, res));
postRouter.get('/singlePost/:postId', (req, res) => postController.getSinglePost(req, res));
exports.default = postRouter;
//# sourceMappingURL=PostRoutes.js.map